<?xml version="1.0" encoding="utf-8"?>
<Siml>
	<Concept Name="_debug" Type="Public">
		<Model>
			<Pattern>DEBUGID GET</Pattern>
			<Response>Your user's "ID" is: "<User Get="ID"/>". The "sourceID" is: "<User Get="SourceID"/>".</Response>
		</Model>
	</Concept>

	<Concept Name="kale test">
		<Model>
			<Pattern>WORDSHUFFLE *</Pattern>
			<Response>
				<Think>
					<Var Set="wordcount"><Text Get="Wordcount"><Match /></Text></Var>
					<Bind Key="{wordcount}"><Var Get="wordcount" /></Bind>
					<Var Set="wordshuffle-i">0</Var>
				</Think>
				<While Var="wordshuffle-i" Not="{wordcount}">
						<Think>
							<Var Set="wordshuffle-i"><Math Get="increment"><Var Get="wordshuffle-i" /></Math></Var>
							<Bind Key="{2}"><Var Get="wordshuffle-i" /></Bind>
						</Think>
					<Text><Goto>STRINGSHUFFLE <Text WordAt="{2}"><Match /></Text></Goto> </Text>
				</While>
			</Response>
		</Model>

		<Model>
			<Pattern>STRINGSHUFFLE *</Pattern>
			<Response>
				<Think>
					<Var Set="chars"><Text Get="Length"><Match /></Text></Var>
					<Bind Key="{0}"><Var Get="chars" /></Bind>
					<Var Set="i">0</Var>
					<Var Set="numberarray"><Js>arrayofnumbers("<Var Get="chars" />")</Js></Var>
				</Think>
				<While Var="i" Not="{0}">
						<Think>
							<Var Set="j"><Js>pickfromarray("<Var Get="numberarray" />","<Var Get="i" />");</Js></Var>
							<Var Set="i"><Math Get="increment"><Var Get="i" /></Math></Var>
							<Bind Key="{2}"><Var Get="j" /></Bind>
						</Think>
					<Text CharAt="{2}"><Match /></Text>
				</While>
			</Response>
		</Model>

		<Model>
			<Pattern>DEBUG ISPRIVATECHAT</Pattern>
			<Response>
				<Think><User Set="isBotPrivateChat"><Js>"<User Get="ID"/>"==="<User Get="SourceID"/>";</Js></User></Think>
				<Switch User="isBotPrivateChat">
					<Case Value="True">You're in private chat... It worked :speak:</Case>
					<Case Value="False">You're in a group chat... Did it work? :speak:</Case>
					<Default>Something went wrong :cry: <User Get="isBotPrivateChat" /></Default>
				</Switch>
			</Response>
		</Model>

		<Model>
			<Pattern>DEBUGGOTO *</Pattern>
			<Response>
				<Think><Var Set="count">0</Var></Think>
				<Bind Key="{0}"><Match /></Bind>
				<While Var="count" Not="{0}"><Think><Var Set="count"><Math Get="increment"><Var Get="count" /></Math></Var></Think><Goto>ROLLDEBUG</Goto> </While>
			</Response>
		</Model>
		
		<Model>
			<Pattern>DEBUGGOTO2 *</Pattern>
			<Response>
				<Think><Var Set="count">0</Var></Think>
				<Bind Key="{0}"><Match /></Bind>
				<While Var="count" Not="{0}"><Think><Var Set="count"><Math Get="increment"><Var Get="count" /></Math></Var></Think><Goto>DEBUGROLL</Goto><Goto>DEBUGROLL</Goto><Goto>DEBUGROLL</Goto> </While>
			</Response>
		</Model>
		
		<Model>
			<Pattern>DEBUGLATE *</Pattern>
			<Response><Think><Bind Key="{0}"><Match /></Bind></Think>I will try to send another message in <Match /> seconds.
				<Late Second="{0}">Success!</Late>
			</Response>
		</Model>
		
		<Model>
			<Pattern>DEBUGSILENTLATE *</Pattern>
			<Response><Think><Bind Key="{0}"><Match /></Bind></Think><Late Second="{0}">Success!</Late></Response>
		</Model>

<Model>
<Pattern>COUNT TO *</Pattern>
<Response>
<Bind Key="{0}"><Match /></Bind>
<Var Set="count">0</Var> <While Var="count" Not="{0}"> <Var Set="count"><Math Get="increment"><Var Get="count" /></Math></Var> </While>
</Response>
</Model>

		<Model>
			<Pattern>DEBUGROLL</Pattern>
			<Response>
				<Random>
					<Item>1</Item>
					<Item>2</Item>
					<Item>3</Item>
					<Item>4</Item>
					<Item>5</Item>
					<Item>6</Item>
				</Random>
			</Response>
		</Model>

		<Model>
			<Pattern>DEBUG35 *</Pattern>
			<Response>Var set to <Var Set="debug35"><Match /></Var></Response>
		</Model>
		
		<Model>
			<Pattern>DEBUG36 *</Pattern>
			<Response>Var is <Var Get="debug35" /></Response>
		</Model>
	</Concept>

	<Concept Name="personaldebug" User="steam-76561198025147895">
		<Model>
			<Pattern>DEBUGTEST</Pattern>
			<Response>Test successful :speak:</Response>
		</Model>
	</Concept>

	<Concept Name="publicpersonaldebug">
		<Model>
			<Pattern>DEBUGTEST</Pattern>
			<Response>Nope :cry:</Response>
		</Model>
	</Concept>
</Siml>
